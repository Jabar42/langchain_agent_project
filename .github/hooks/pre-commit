#!/bin/bash

echo "üîç Ejecutando pre-commit hooks..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Verificar formato de mensaje de commit
commit_msg=$(cat $1)
commit_pattern="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\([a-z]+\))?: .{1,50}$"

if ! echo "$commit_msg" | grep -qE "$commit_pattern"; then
    echo -e "${RED}Error: Formato de commit inv√°lido${NC}"
    echo -e "${YELLOW}Formato correcto: <tipo>(<alcance>): <descripci√≥n>${NC}"
    echo -e "Tipos: feat, fix, docs, style, refactor, perf, test, build, ci, chore"
    exit 1
fi

# Verificar archivos Python
echo "üìù Verificando archivos Python..."
files=$(git diff --cached --name-only --diff-filter=ACM | grep ".py$")
if [ -n "$files" ]; then
    # Ejecutar black
    echo "üé® Ejecutando black..."
    python -m black $files
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Formateo de c√≥digo fall√≥${NC}"
        exit 1
    fi

    # Ejecutar flake8
    echo "üîç Ejecutando flake8..."
    python -m flake8 $files
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Verificaci√≥n de estilo fall√≥${NC}"
        exit 1
    fi

    # Ejecutar mypy
    echo "üîç Verificando tipos con mypy..."
    python -m mypy $files
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Verificaci√≥n de tipos fall√≥${NC}"
        exit 1
    fi

    # Ejecutar tests unitarios
    echo "üß™ Ejecutando tests unitarios..."
    python -m pytest tests/
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Tests fallaron${NC}"
        exit 1
    fi
fi

# Verificar archivos de documentaci√≥n
echo "üìö Verificando documentaci√≥n..."
docs=$(git diff --cached --name-only --diff-filter=ACM | grep ".md$")
if [ -n "$docs" ]; then
    # Verificar PROJECT_TRACKING.md
    if echo "$docs" | grep -q "PROJECT_TRACKING.md"; then
        echo "üìä Verificando PROJECT_TRACKING.md..."
        if ! grep -q "√öltima actualizaci√≥n: " "PROJECT_TRACKING.md"; then
            echo -e "${RED}Error: PROJECT_TRACKING.md no tiene fecha de √∫ltima actualizaci√≥n${NC}"
            exit 1
        fi
    fi
fi

# Verificar archivos sensibles
echo "üîí Verificando archivos sensibles..."
if git diff --cached --name-only | grep -q ".env$"; then
    echo -e "${RED}Error: No se permite commitear archivos .env${NC}"
    exit 1
fi

# Verificar tama√±o del commit
changes=$(git diff --cached --numstat | awk '{added+=$1; removed+=$2} END {print added+removed}')
if [ "$changes" -gt 400 ]; then
    echo -e "${YELLOW}Advertencia: El commit tiene m√°s de 400 l√≠neas cambiadas${NC}"
    echo -e "Considera dividir los cambios en commits m√°s peque√±os"
    read -p "¬øDeseas continuar? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Todas las verificaciones pasaron exitosamente${NC}"
exit 0 